{
    "project": {
        "name": "YUIDoc",
        "logo": "http://yuilibrary.com/img/yui-logo.png",
        "description": "YUIDoc, YUI's JavaScript Documentation engine.",
        "version": "0.3.34"
    },
    "files": {
        "lib/builder.js": {
            "name": "lib/builder.js",
            "modules": {},
            "classes": {
                "DocBuilder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/cli.js": {
            "name": "lib/cli.js",
            "modules": {},
            "classes": {
                "CLI": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/docparser.js": {
            "name": "lib/docparser.js",
            "modules": {},
            "classes": {
                "DocParser": 1
            },
            "fors": {
                "DocParser": 1
            },
            "namespaces": {}
        },
        "lib/docview.js": {
            "name": "lib/docview.js",
            "modules": {},
            "classes": {
                "DocView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/files.js": {
            "name": "lib/files.js",
            "modules": {},
            "classes": {
                "Files": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/help.js": {
            "name": "lib/help.js",
            "modules": {},
            "classes": {
                "Help": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/index.js": {
            "name": "lib/index.js",
            "modules": {},
            "classes": {
                "Main": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/options.js": {
            "name": "lib/options.js",
            "modules": {},
            "classes": {
                "Options": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/server.js": {
            "name": "lib/server.js",
            "modules": {},
            "classes": {
                "Server": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/utils.js": {
            "name": "lib/utils.js",
            "modules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/yuidoc.js": {
            "name": "lib/yuidoc.js",
            "modules": {
                "yuidoc": 1
            },
            "classes": {
                "YUIDoc": 1
            },
            "fors": {
                "YUIDoc": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "yuidoc": {
            "name": "yuidoc",
            "submodules": {},
            "classes": {
                "DocBuilder": 1,
                "CLI": 1,
                "DocParser": 1,
                "DocView": 1,
                "Files": 1,
                "Help": 1,
                "Main": 1,
                "Options": 1,
                "Server": 1,
                "Utils": 1,
                "YUIDoc": 1
            },
            "fors": {
                "DocParser": 1,
                "YUIDoc": 1
            },
            "namespaces": {},
            "tag": "main",
            "file": "lib/yuidoc.js",
            "line": 50,
            "description": "This is the __module__ description for the `YUIDoc` module.\n\n    var options = {\n        paths: [ './lib' ],\n        outdir: './out'\n    };\n\n    var Y = require('yuidocjs');\n    var json = (new Y.YUIDoc(options)).run();",
            "itemtype": "main"
        }
    },
    "classes": {
        "DocBuilder": {
            "name": "DocBuilder",
            "shortname": "DocBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "file": "lib/builder.js",
            "line": 13,
            "description": "Takes the `JSON` data from the `DocParser` class, creates and parses markdown and handlebars\nbased templates to generate static HTML content"
        },
        "CLI": {
            "name": "CLI",
            "shortname": "CLI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "file": "lib/cli.js",
            "line": 8,
            "description": "Parses the arguments, creates the options and passes them to `Y.YUIDoc` and then `Y.DocBuilder`."
        },
        "DocParser": {
            "name": "DocParser",
            "shortname": "DocParser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "file": "lib/docparser.js",
            "line": 722,
            "description": "The doc parser accepts a **map** of files to file content.\nOnce `parse()` is called, various properties will be populated\nwith the parsers data (aggregated in the `'data'` property).",
            "extends": "Base",
            "is_constructor": 1,
            "params": [
                {
                    "name": "o",
                    "description": "the config object",
                    "type": "Object"
                }
            ]
        },
        "DocView": {
            "name": "DocView",
            "shortname": "DocView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "file": "lib/docview.js",
            "line": 15,
            "description": "View class borrowed from [Selleck](https://github.com/rgrove/selleck)  \nThe view class is a **`handlebars`** template helper.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Meta data to use in this template",
                    "type": "Object"
                },
                {
                    "name": "templateName",
                    "description": "The name of the template file to render.",
                    "type": "String"
                }
            ]
        },
        "Files": {
            "name": "Files",
            "shortname": "Files",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "file": "lib/files.js",
            "line": 3,
            "description": "Ported fileutils methods from [Selleck](http://github.com/rgrove/selleck)"
        },
        "Help": {
            "name": "Help",
            "shortname": "Help",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "file": "lib/help.js",
            "line": 8,
            "description": "Shows the help text"
        },
        "Main": {
            "name": "Main",
            "shortname": "Main",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "file": "lib/index.js",
            "line": 6,
            "description": "Module creates the YUI instance with the required modules, uses them and exports the **Y** to be used\nby the _CLI class_ or by extenders: `require('yuidocjs');`  \nYou can use it like this:  \n\n    var options = {\n        paths: [ './lib' ],\n        outdir: './out'\n    };\n\n    var Y = require('yuidocjs');\n    var json = (new Y.YUIDoc(options)).run();",
            "exports": "{YUI} Y A YUI instance"
        },
        "Options": {
            "name": "Options",
            "shortname": "Options",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "file": "lib/options.js",
            "line": 5,
            "description": "Handles argument parsing"
        },
        "Server": {
            "name": "Server",
            "shortname": "Server",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "file": "lib/server.js",
            "line": 4,
            "description": "Provides the `--server` server option for YUIDoc"
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "file": "lib/utils.js",
            "line": 11,
            "description": "Utilities Class"
        },
        "YUIDoc": {
            "name": "YUIDoc",
            "shortname": "YUIDoc",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "yuidoc",
            "namespace": "",
            "file": "lib/yuidoc.js",
            "line": 50,
            "description": "YUIDoc main class\n\n       var options = {\n           paths: [ './lib' ],\n           outdir: './out'\n       };\n\n       var Y = require('yuidoc');\n       var json = (new Y.YUIDoc(options)).run();",
            "mainName": "yuidoc",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "is_constructor": 1,
            "params": [
                {
                    "name": "config",
                    "description": "The config object"
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "lib/builder.js",
            "line": 115,
            "description": "Register a `Y.Handlebars` helper method",
            "itemtype": "method",
            "name": "_addHelpers",
            "params": [
                {
                    "name": "helpers",
                    "description": "Object containing a hash of names and functions",
                    "type": "Object"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 132,
            "description": "Wrapper around the Markdown parser so it can be normalized or even side stepped",
            "itemtype": "method",
            "name": "markdown",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "md",
                    "description": "The Markdown string to parse",
                    "type": "String"
                },
                {
                    "name": "def",
                    "description": "Only allow default set of HTML tags",
                    "type": "Boolean"
                },
                {
                    "name": "tags",
                    "description": "An array of tags to allow",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The rendered HTML",
                "type": "HTML"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 158,
            "description": "Parse the item to be cross linked and return an HREF linked to the item",
            "itemtype": "method",
            "name": "_parseCrossLink",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "item",
                    "description": "The item to crossLink",
                    "type": "String"
                },
                {
                    "name": "raw",
                    "description": "Do not wrap it in HTML",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 258,
            "description": "List of native types to cross link to MDN",
            "itemtype": "property",
            "name": "NATIVES",
            "type": "Object",
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 297,
            "description": "Function to link an external type uses `NATIVES` object",
            "itemtype": "method",
            "name": "NATIVES_LINKER",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the type to link",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The combined URL",
                "type": "String"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 311,
            "description": "Mixes the various external data soures together into the local data, augmenting \nit with flags.",
            "itemtype": "method",
            "name": "_mixExternal",
            "access": "private",
            "tagname": "",
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 359,
            "description": "Fetches the remote data and fires the callback when it's all complete",
            "itemtype": "method",
            "name": "mixExternal",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute when complete",
                    "type": "Callback"
                }
            ],
            "async": 1,
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 426,
            "description": "The default tags to use in return descriptions (for Markdown).",
            "itemtype": "property",
            "name": "defaultReturnTags",
            "type": "String",
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 432,
            "description": "The default tags to use in params descriptions (for Markdown).",
            "itemtype": "property",
            "name": "defaultTags",
            "type": "String",
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 438,
            "description": "File counter",
            "itemtype": "property",
            "name": "files",
            "type": "Number",
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 444,
            "description": "Holder for project meta data",
            "itemtype": "property",
            "name": "_meta",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 451,
            "description": "Prep the meta data to be fed to Selleck",
            "itemtype": "method",
            "name": "getProjectMeta",
            "return": {
                "description": "The project metadata",
                "type": "Object"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 494,
            "description": "Populate the meta data for classes",
            "itemtype": "method",
            "name": "populateClasses",
            "params": [
                {
                    "name": "opts",
                    "description": "The original options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The modified options",
                "type": "Object"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 516,
            "description": "Populate the meta data for modules",
            "itemtype": "method",
            "name": "populateModules",
            "params": [
                {
                    "name": "opts",
                    "description": "The original options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The modified options",
                "type": "Object"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 553,
            "description": "Populate the meta data for files",
            "itemtype": "method",
            "name": "populateFiles",
            "params": [
                {
                    "name": "opts",
                    "description": "The original options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The modified options",
                "type": "Object"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 602,
            "description": "Parses file and line number from an item object and build's an HREF",
            "itemtype": "method",
            "name": "addFoundAt",
            "params": [
                {
                    "name": "a",
                    "description": "The item to parse",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The parsed HREF",
                "type": "String"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 618,
            "description": "Augments the **DocParser** meta data to provide default values for certain keys as well as parses all descriptions\nwith the `Markdown Parser`",
            "itemtype": "method",
            "name": "augmentData",
            "params": [
                {
                    "name": "o",
                    "description": "The object to recurse and augment",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The augmented object",
                "type": "Object"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 684,
            "description": "Makes the default directories needed",
            "itemtype": "method",
            "name": "makeDirs",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 725,
            "description": "Parses `<pre><code>` tags and adds the __prettyprint__ `className` to them",
            "itemtype": "method",
            "name": "_parseCode",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "html",
                    "description": "The HTML to parse",
                    "type": "HTML"
                }
            ],
            "return": {
                "description": "The parsed HTML",
                "type": "HTML"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 738,
            "description": "Ported from [Selleck](https://github.com/rgrove/selleck), this handles ```'s in fields\n       that are not parsed by the **Markdown** parser.",
            "itemtype": "method",
            "name": "_inlineCode",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "html",
                    "description": "The HTML to parse",
                    "type": "HTML"
                }
            ],
            "return": {
                "description": "The parsed HTML",
                "type": "HTML"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 757,
            "description": "Ported from [Selleck](https://github.com/rgrove/selleck)\n       Renders the handlebars templates with the default View class.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "source",
                    "description": "The default template to parse",
                    "type": "HTML"
                },
                {
                    "name": "view",
                    "description": "The default view handler",
                    "type": "Class"
                },
                {
                    "name": "layout",
                    "description": "The HTML from the layout to use.",
                    "type": "HTML",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "partials",
                    "description": "List of partials to include in this template",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "html",
                            "description": "The assembled template markup",
                            "type": "HTML"
                        }
                    ]
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 811,
            "description": "Render the index file",
            "itemtype": "method",
            "name": "renderIndex",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback fired when complete",
                    "type": "Function",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to render this view",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "cv.view",
                    "description": "The View Data",
                    "type": "Object"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 836,
            "description": "Generates the index.html file",
            "itemtype": "method",
            "name": "writeIndex",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 860,
            "description": "Render a module",
            "itemtype": "method",
            "name": "renderModule",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback fired when complete",
                    "type": "Function",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to render this view",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "cv.view",
                    "description": "The View Data",
                    "type": "Object"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 938,
            "description": "Generates the module files under \"out\"/modules/",
            "itemtype": "method",
            "name": "writeModules",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 973,
            "description": "Checks an array of items (class items) to see if an item is in that list",
            "itemtype": "method",
            "name": "hasProperty",
            "params": [
                {
                    "name": "a",
                    "description": "The Array of items to check",
                    "type": "Array"
                },
                {
                    "name": "b",
                    "description": "The object to find",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Boolean"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 990,
            "description": "Counter for stepping into merges",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_mergeCounter",
            "type": "Number",
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 997,
            "description": "Merge superclass data into a child class",
            "itemtype": "method",
            "name": "mergeExtends",
            "params": [
                {
                    "name": "info",
                    "description": "The item to extend",
                    "type": "Object"
                },
                {
                    "name": "classItems",
                    "description": "The list of items to merge in",
                    "type": "Array"
                },
                {
                    "name": "first",
                    "description": "Set for the first call",
                    "type": "Boolean"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 1048,
            "description": "Render the class file",
            "itemtype": "method",
            "name": "renderClass",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback fired when complete",
                    "type": "Function",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to render this view",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "cv.view",
                    "description": "The View Data",
                    "type": "Object"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 1332,
            "description": "Generates the class files under \"out\"/classes/",
            "itemtype": "method",
            "name": "writeClasses",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 1367,
            "description": "Sort method of array of objects with a property called __name__",
            "itemtype": "method",
            "name": "nameSort",
            "params": [
                {
                    "name": "a",
                    "description": "First object to compare",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "Second object to compare",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "1, -1 or 0 for sorting.",
                "type": "Number"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 1390,
            "description": "Generates the syntax files under `\"out\"/files/`",
            "itemtype": "method",
            "name": "writeFiles",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 1428,
            "description": "Render the source file",
            "itemtype": "method",
            "name": "renderFile",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback fired when complete",
                    "type": "Function",
                    "props": [
                        {
                            "name": "html",
                            "description": "The HTML to render this view",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "cv.view",
                    "description": "The View Data",
                    "type": "Object"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 1476,
            "description": "Write the API meta data used for the AutoComplete widget",
            "itemtype": "method",
            "name": "writeAPIMeta",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute when complete",
                    "type": "Callback"
                }
            ],
            "async": 1,
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 1489,
            "description": "Render the API meta and return the Javascript",
            "itemtype": "method",
            "name": "renderAPIMeta",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback",
                    "type": "Callback"
                }
            ],
            "async": 1,
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 1519,
            "description": "Normalizes a file path to a writable filename:\n\n   var path = 'lib/file.js';\n   returns 'lib_file.js';",
            "itemtype": "method",
            "name": "filterFileName",
            "params": [
                {
                    "name": "f",
                    "description": "The filename to normalize",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The filtered file path",
                "type": "String"
            },
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/builder.js",
            "line": 1532,
            "description": "Compiles the templates from the meta-data provided by DocParser",
            "itemtype": "method",
            "name": "compile",
            "params": [
                {
                    "name": "cb",
                    "description": "The callback to execute after it's completed",
                    "type": "Callback"
                }
            ],
            "class": "DocBuilder",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 12,
            "description": "Parses the JSON data and formats it into a nice log string for filename and line number:\n   `/file/name.js:123`",
            "itemtype": "method",
            "name": "stringlog",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The data block from the parser",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The formatted string.",
                "type": "String"
            },
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 95,
            "description": "A list of known tags.  This populates a member variable\nduring initialization, and will be updated if additional\ndigesters are added.",
            "itemtype": "property",
            "name": "TAGLIST",
            "type": "Array",
            "final": 1,
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 175,
            "description": "Common errors will get scrubbed instead of being ignored.",
            "itemtype": "property",
            "name": "CORRECTIONS",
            "type": "Object",
            "final": 1,
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 198,
            "description": "A map of the default tag processors, keyed by the\ntag name.  Multiple tags can use the same digester\nby supplying the string name that points to the\nimplementation rather than a function.",
            "itemtype": "property",
            "name": "DIGESTERS",
            "type": "Object",
            "final": 1,
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 746,
            "description": "Digesters process the tag/text pairs found in a\ncomment block.  They are looked up by tag name.\nThe digester gets the tagname, the value, the\ntarget object to apply values to, and the full\nblock that is being processed.  Digesters can\nbe declared as strings instead of a function --\nin that case, the program will try to look up\nthe key listed and use the function there instead\n(it is an alias).  Digesters can return a host\nobject in the case the tag defines a new key\nblock type (modules/classes/methods/events/properties)",
            "itemtype": "attribute",
            "name": "digesters",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 768,
            "description": "Emitters will be schemas for the types of payloads\nthe parser will emit.  Not implemented.",
            "itemtype": "attribute",
            "name": "emitters",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 779,
            "description": "Comment syntax type.",
            "itemtype": "attribute",
            "name": "syntaxtype",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 788,
            "description": "The map of file names to file content.",
            "itemtype": "attribute",
            "name": "filemap",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 796,
            "description": "A map of file names to directory name.  Provided in\ncase this needs to be used to reset the module name\nappropriately -- currently not used",
            "itemtype": "attribute",
            "name": "dirmap",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 806,
            "description": "The file currently being parsed",
            "itemtype": "attribute",
            "name": "currentfile",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 827,
            "description": "The main documentation block for the module itself.",
            "itemtype": "attribute",
            "name": "mainmodule",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 863,
            "description": "The module currently being parsed",
            "itemtype": "attribute",
            "name": "currentmodule",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 915,
            "description": "The submodule currently being parsed",
            "itemtype": "attribute",
            "name": "currentsubmodule",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 955,
            "description": "The class currently being parsed",
            "itemtype": "attribute",
            "name": "currentclass",
            "type": "String",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 991,
            "description": "Takes a non-namespaced classname and resolves it to a namespace (to support `@for`)",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_resolveFor",
            "params": [
                {
                    "name": "value",
                    "description": "The classname to resolve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The resolved namespace + classname",
                "type": "String"
            },
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 1064,
            "description": "Normalizes the initial indentation of the given _content_ so that the first line\nis unindented, and all other lines are unindented to the same degree as the\nfirst line. So if the first line has four spaces at the beginning, then all\nlines will be unindented four spaces. Ported from [Selleck](https://github.com/rgrove/selleck)",
            "itemtype": "method",
            "name": "unindent",
            "params": [
                {
                    "name": "content",
                    "description": "Text to unindent.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Unindented text.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 1086,
            "description": "Transforms a JavaDoc style comment block (less the start\nand end of it) into a list\nof tag/text pairs.  The leading space and '*' are removed,\nbut the remaining whitespace is preserved so that the\noutput should be friendly for both markdown and html\nparsers.",
            "itemtype": "method",
            "name": "handlecomment",
            "params": [
                {
                    "name": "comment",
                    "description": "The comment to parse",
                    "type": "String"
                },
                {
                    "name": "file",
                    "description": "The file it was parsed from",
                    "type": "String"
                },
                {
                    "name": "line",
                    "description": "The line number it was found on",
                    "type": "String"
                }
            ],
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 1157,
            "description": "Accepts a map of filenames to file content.  Returns\na map of filenames to an array of API comment block\ntext.  This expects the comment to start with / **\non its own line, and end with * / on its own\nline.  Override this function to provide an\nalternative comment parser.",
            "itemtype": "method",
            "name": "extract",
            "params": [
                {
                    "name": "filemap",
                    "description": "A map of filenames to file content",
                    "type": "Object"
                },
                {
                    "name": "dirmap",
                    "description": "A map of file names to directory name",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A map of filenames to an array of extracted\ncomment text.",
                "type": "Object"
            },
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 1211,
            "description": "Processes all the tags in a single comment block",
            "itemtype": "method",
            "name": "processblock",
            "params": [
                {
                    "name": "an",
                    "description": "array of the tag/text pairs",
                    "type": "Array"
                }
            ],
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 1285,
            "description": "Transforms a map of filenames to arrays of comment blocks into a\nJSON structure that represents the entire processed API doc info\nand relationships between elements for the entire project.",
            "itemtype": "method",
            "name": "transform",
            "params": [
                {
                    "name": "commentmap",
                    "description": "The hash of files and parsed comment blocks",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The transformed data for the project",
                "type": "Object"
            },
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docparser.js",
            "line": 1398,
            "description": "Extracts and transforms the filemap provided to constructor",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "filemap",
                    "description": "A map of filenames to file content",
                    "type": "Array"
                },
                {
                    "name": "dirmap",
                    "description": "A map of file names to directory name",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "this parser instance.  The total results\nare available in parser.data.",
                "type": "DocParser"
            },
            "class": "DocParser",
            "module": "yuidoc"
        },
        {
            "file": "lib/docview.js",
            "line": 29,
            "description": "**Mustache** `lambda` method for setting the HTML title",
            "itemtype": "method",
            "name": "htmlTitle",
            "class": "DocView",
            "module": "yuidoc"
        },
        {
            "file": "lib/docview.js",
            "line": 48,
            "description": "**Mustache** `lambda` method for setting the title",
            "itemtype": "method",
            "name": "title",
            "class": "DocView",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 37,
            "description": "Copy a directory from one location to another",
            "itemtype": "method",
            "name": "copyDirectory",
            "params": [
                {
                    "name": "source",
                    "description": "The source directory",
                    "type": "Path"
                },
                {
                    "name": "dest",
                    "description": "The destination directory",
                    "type": "Path"
                },
                {
                    "name": "overwrite",
                    "description": "Whether or not to overwrite destination files\n if they already exist.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when complete.",
                    "type": "Function"
                }
            ],
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 114,
            "description": "Copy a file from one location to another",
            "itemtype": "method",
            "name": "copyFile",
            "params": [
                {
                    "name": "source",
                    "description": "The source file",
                    "type": "Path"
                },
                {
                    "name": "dest",
                    "description": "The destination file",
                    "type": "Path"
                },
                {
                    "name": "overwrite",
                    "description": "Whether or not to overwrite destination files\n if they already exist.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed when complete.",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "err",
                            "description": "The Error returned from Node",
                            "type": "Error"
                        }
                    ]
                }
            ],
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 157,
            "description": "If _source_ is a file, copies it to _dest_. If it's a directory, recursively\ncopies it and all files and directories it contains to _dest_.\n\nNote that when attempting to copy a file into a directory, you should specify\nthe full path to the new file (including the new filename). Otherwise, it will\nbe interpreted as an attempt to copy the _source_ file *over* the _dest_\ndirectory instead of *into* it.\n\nKnown issues:\n- Doesn't preserve ownership or permissions on copied files/directories.",
            "itemtype": "method",
            "name": "copyPath",
            "params": [
                {
                    "name": "source",
                    "description": "Source path.",
                    "type": "String"
                },
                {
                    "name": "dest",
                    "description": "Destination path.",
                    "type": "String"
                },
                {
                    "name": "overwrite",
                    "description": "Whether or not to overwrite destination files\nif they already exist.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "The callback to execute when completed.",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        }
                    ]
                }
            ],
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 204,
            "description": "If _path_ is a file, deletes it. If _path_ is a directory, recursively deletes\nit and all files and directories it contains.\n\nThis method is synchronous.",
            "itemtype": "method",
            "name": "deletePath",
            "params": [
                {
                    "name": "path",
                    "description": "File or directory to delete.",
                    "type": "String"
                }
            ],
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 228,
            "description": "Check to see if this is a directory",
            "itemtype": "method",
            "name": "isDirectory",
            "params": [
                {
                    "name": "path",
                    "description": "The path to check",
                    "type": "Path"
                },
                {
                    "name": "link",
                    "description": "Also validate a symlink",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "True if it is a directory",
                "type": "Boolean"
            },
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 256,
            "description": "Check to see if this is a File",
            "itemtype": "method",
            "name": "isFile",
            "params": [
                {
                    "name": "path",
                    "description": "The path to check",
                    "type": "Path"
                },
                {
                    "name": "link",
                    "description": "Also validate a symlink",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "True if it is a file",
                "type": "Boolean"
            },
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 282,
            "description": "Check to see if this is a SymLink",
            "itemtype": "method",
            "name": "isSymbolicLink",
            "params": [
                {
                    "name": "path",
                    "description": "The path to check",
                    "type": "Path"
                }
            ],
            "return": {
                "description": "True if it is a link",
                "type": "Boolean"
            },
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 294,
            "description": "Like `fs.lstatSync()`, but returns `null` instead of throwing when _path_\ndoesn't exist. Will still throw on other types of errors.",
            "itemtype": "method",
            "name": "lstatSync",
            "params": [
                {
                    "name": "path",
                    "description": "Path to stat.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`fs.Stats` object, or `null` if _path_ doesn't exist.",
                "type": "fs.Stats|null"
            },
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 315,
            "description": "Like `fs.statSync()`, but returns `null` instead of throwing when _path_\ndoesn't exist. Will still throw on other types of errors.",
            "itemtype": "method",
            "name": "statSync",
            "params": [
                {
                    "name": "path",
                    "description": "Path to stat.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`fs.Stats` object, or `null` if _path_ doesn't exist.",
                "type": "fs.Stats|null"
            },
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 336,
            "description": "Copy the theme assets directory",
            "itemtype": "method",
            "name": "copyAssets",
            "params": [
                {
                    "name": "from",
                    "description": "The source directory",
                    "type": "Path"
                },
                {
                    "name": "dest",
                    "description": "The destination directory",
                    "type": "Path"
                },
                {
                    "name": "deleteFirst",
                    "description": "Should the directory be deleted if it exists",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "The callback to be executed",
                    "type": "Function"
                }
            ],
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 384,
            "description": "Helper method for getting JSON data from a local file",
            "itemtype": "method",
            "name": "getJSON",
            "params": [
                {
                    "name": "filename",
                    "description": "The filename to parse JSON from",
                    "type": "Path"
                }
            ],
            "return": {
                "description": "The JSON data",
                "type": "Object"
            },
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/files.js",
            "line": 398,
            "description": "Helper method for writing files to disk. It wraps the NodeJS file API",
            "itemtype": "method",
            "name": "writeFile",
            "params": [
                {
                    "name": "file",
                    "description": "The filename to write to",
                    "type": "Path"
                },
                {
                    "name": "data",
                    "description": "The data to write",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Callback",
                    "multiple": true
                }
            ],
            "class": "Files",
            "module": "yuidoc"
        },
        {
            "file": "lib/help.js",
            "line": 14,
            "description": "The help text to display",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "help",
            "type": "Array",
            "class": "Help",
            "module": "yuidoc"
        },
        {
            "file": "lib/help.js",
            "line": 60,
            "description": "Render the help message as a string",
            "itemtype": "method",
            "name": "renderHelp",
            "return": {
                "description": "The help screen to display",
                "type": "String"
            },
            "class": "Help",
            "module": "yuidoc"
        },
        {
            "file": "lib/help.js",
            "line": 70,
            "description": "Display the help message, write it to the screen and exit",
            "itemtype": "method",
            "name": "showHelp",
            "class": "Help",
            "module": "yuidoc"
        },
        {
            "file": "lib/options.js",
            "line": 11,
            "description": "Parses arguments and returns an Object of config options",
            "itemtype": "method",
            "name": "Options",
            "params": [
                {
                    "name": "args",
                    "description": "Arguments to parse",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "The config object",
                "type": "Object"
            },
            "class": "Options",
            "module": "yuidoc"
        },
        {
            "file": "lib/server.js",
            "line": 10,
            "description": "Cache for external mixed in data.",
            "itemtype": "property",
            "name": "_externalData",
            "access": "private",
            "tagname": "",
            "type": "Object",
            "class": "Server",
            "module": "yuidoc"
        },
        {
            "file": "lib/server.js",
            "line": 17,
            "description": "Middleware to parse the API docs per request",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "req",
                    "description": "Express request object",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express response object",
                    "type": "Response"
                },
                {
                    "name": "next",
                    "description": "Express next callback",
                    "type": "Function"
                }
            ],
            "class": "Server",
            "module": "yuidoc"
        },
        {
            "file": "lib/server.js",
            "line": 35,
            "description": "Create the routes used to serve YUIDoc files dynamically",
            "itemtype": "method",
            "name": "routes",
            "class": "Server",
            "module": "yuidoc"
        },
        {
            "file": "lib/server.js",
            "line": 106,
            "description": "`/files` endpoint",
            "itemtype": "method",
            "name": "files",
            "params": [
                {
                    "name": "req",
                    "description": "Express request object",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express response object",
                    "type": "Response"
                }
            ],
            "class": "Server",
            "module": "yuidoc"
        },
        {
            "file": "lib/server.js",
            "line": 132,
            "description": "`/classes` endpoint",
            "itemtype": "method",
            "name": "clazz",
            "params": [
                {
                    "name": "req",
                    "description": "Express request object",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express response object",
                    "type": "Response"
                }
            ],
            "class": "Server",
            "module": "yuidoc"
        },
        {
            "file": "lib/server.js",
            "line": 148,
            "description": "`/modules` endpoint",
            "itemtype": "method",
            "name": "modules",
            "params": [
                {
                    "name": "req",
                    "description": "Express request object",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express response object",
                    "type": "Response"
                }
            ],
            "class": "Server",
            "module": "yuidoc"
        },
        {
            "file": "lib/server.js",
            "line": 164,
            "description": "`/` endpoint",
            "itemtype": "method",
            "name": "home",
            "params": [
                {
                    "name": "req",
                    "description": "Express request object",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express response object",
                    "type": "Response"
                }
            ],
            "class": "Server",
            "module": "yuidoc"
        },
        {
            "file": "lib/server.js",
            "line": 176,
            "description": "Creates the Express server and prep's YUI for serving",
            "itemtype": "method",
            "name": "init",
            "class": "Server",
            "module": "yuidoc"
        },
        {
            "file": "lib/server.js",
            "line": 194,
            "description": "Start the server with the supplied options.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "options",
                    "description": "Server options",
                    "type": "Object"
                }
            ],
            "class": "Server",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 31,
            "description": "Escapes HTML characters in _html_.",
            "itemtype": "method",
            "name": "escapeHTML",
            "params": [
                {
                    "name": "html",
                    "description": "String to escape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Escaped string.",
                "type": "String"
            },
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 44,
            "description": "Normalizes the initial indentation of the given _content_ so that the first line\nis unindented, and all other lines are unindented to the same degree as the\nfirst line. So if the first line has four spaces at the beginning, then all\nlines will be unindented four spaces.",
            "itemtype": "method",
            "name": "unindent",
            "params": [
                {
                    "name": "content",
                    "description": "Text to unindent.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Unindented text.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 65,
            "description": "Like `getPages()`, but returns only the files under the `layout/` subdirectory\nof the specified _dir_.",
            "itemtype": "method",
            "name": "getLayouts",
            "params": [
                {
                    "name": "dir",
                    "description": "Directory path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Mapping of layout names to layout content.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 78,
            "description": "Loads and returns the content of the specified page file.",
            "itemtype": "method",
            "name": "getPage",
            "params": [
                {
                    "name": "pagePath",
                    "description": "Path to a single `.handlebars` page.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Page content, or `null` if not found.",
                "type": "String|null"
            },
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 91,
            "description": "Loads pages (files with a `.handlebars` extension) in the specified directory and\nreturns an object containing a mapping of page names (the part of the filename)\npreceding the `.handlebars` extension) to page content.",
            "itemtype": "method",
            "name": "getPages",
            "params": [
                {
                    "name": "dir",
                    "description": "Directory path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Mapping of page names to page content.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 122,
            "description": "Like `getPages()`, but returns only the files under the `partial/` subdirectory\nof the specified _dir_.",
            "itemtype": "method",
            "name": "getPartials",
            "params": [
                {
                    "name": "dir",
                    "description": "Directory path.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Mapping of partial names to partial content.",
                "type": "Object"
            },
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 136,
            "description": "Mix/merge/munge data into the template.",
            "itemtype": "method",
            "name": "prepare",
            "params": [
                {
                    "name": "inDir",
                    "description": "The starting directory",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "The `options` for the meta data.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to excecute when complete",
                    "type": "Callback",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "options",
                            "description": "Merged options.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 225,
            "description": "Walk the directory tree to locate the yuidoc.json file.",
            "itemtype": "method",
            "name": "getProjectData",
            "params": [
                {
                    "name": "dir",
                    "description": "The directory to start from",
                    "type": "Path",
                    "optional": true,
                    "optdefault": "process.cwd()"
                }
            ],
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 311,
            "description": "Walks the tree from this dir and returns all the subdirs",
            "itemtype": "method",
            "name": "getDirs",
            "params": [
                {
                    "name": "dir",
                    "description": "The dir to begin at",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The array of directories..",
                "type": "Array"
            },
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 338,
            "description": "Make sure all the paths passed are directories and that they are not in the ignore list.",
            "itemtype": "method",
            "name": "validatePaths",
            "params": [
                {
                    "name": "paths",
                    "description": "The array of paths to validate",
                    "type": "Array"
                },
                {
                    "name": "ignore",
                    "description": "A string to call `.indexOf` on a path to determine if it should be ignored",
                    "type": "String",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/utils.js",
            "line": 407,
            "description": "Takes a type string and converts it to a \"First letter upper cased\" type. e.g. `(string -> String, object -> Object)`",
            "itemtype": "method",
            "name": "fixType",
            "params": [
                {
                    "name": "t",
                    "description": "The type string to convert",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The fixed string",
                "type": "String"
            },
            "class": "Utils",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 29,
            "description": "The default list of configuration options",
            "itemtype": "property",
            "name": "OPTIONS",
            "type": "Object",
            "final": 1,
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 67,
            "description": "Holds the number of files that we are processing.",
            "itemtype": "property",
            "name": "filecount",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 74,
            "description": "Hash map of dirnames to selleck config options.",
            "itemtype": "property",
            "name": "selleck",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 81,
            "description": "Holder for the list of files we are processing.",
            "itemtype": "property",
            "name": "filemap",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 88,
            "description": "Holder for the list of directories we are processing.",
            "itemtype": "property",
            "name": "dirmap",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 96,
            "description": "Internal holder for configuration options.",
            "itemtype": "property",
            "name": "options",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 113,
            "description": "Always exclude these directories",
            "itemtype": "method",
            "name": "_setDefaultExcludes",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 127,
            "description": "Does post process on self.options.",
            "itemtype": "method",
            "name": "_processConfig",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 137,
            "description": "Walks the paths and parses the directory contents",
            "itemtype": "method",
            "name": "walk",
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 147,
            "description": "Walks the passed directory and grabs all the files recursively.",
            "itemtype": "method",
            "name": "parsedir",
            "params": [
                {
                    "name": "dir",
                    "description": "The directory to parse the contents of.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 182,
            "description": "Gathers all the file data and populates the filemap and dirmap hashes.",
            "itemtype": "method",
            "name": "parsefiles",
            "params": [
                {
                    "name": "dir",
                    "description": "The directory to start from.",
                    "type": "String"
                },
                {
                    "name": "files",
                    "description": "List of files to parse.",
                    "type": "Array"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 233,
            "description": "Writes the parser JSON data to disk.",
            "itemtype": "method",
            "name": "writeJSON",
            "params": [
                {
                    "name": "parser",
                    "description": "The DocParser instance to use",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "The JSON data returned from the DocParser",
                "type": "Object"
            },
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 311,
            "description": "Process the config, walk the file tree and write out the JSON data.",
            "itemtype": "method",
            "name": "run",
            "return": {
                "description": "The JSON data returned from the DocParser",
                "type": "Object"
            },
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 317,
            "description": "Timestamp holder so we know when YUIDoc started the parse process.",
            "itemtype": "property",
            "name": "starttime",
            "type": "Timestamp",
            "class": "YUIDoc",
            "module": "yuidoc"
        },
        {
            "file": "lib/yuidoc.js",
            "line": 340,
            "description": "Timestamp holder so we know when YUIDoc has finished the parse process.",
            "itemtype": "property",
            "name": "endtime",
            "type": "Timestamp",
            "class": "YUIDoc",
            "module": "yuidoc"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: exports",
            "line": " lib/index.js:6"
        }
    ]
}