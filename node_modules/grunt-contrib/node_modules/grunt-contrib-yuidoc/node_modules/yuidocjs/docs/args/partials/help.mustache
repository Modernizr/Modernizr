
YUI Doc generates API documentation from a modified JavaDoc syntax.

Current version (0.3.34)

Usage: yuidoc <options> <input path>

Common Options:
  -c, --config, --configfile <filename>  A JSON config file to provide configuration data.
           You can also create a yuidoc.json file and place it
           anywhere under your source tree and YUI Doc will find it
           and use it.
  -e, --extension <comma sep list of file extensions> The list of file extensions to parse 
           for api documentation. (defaults to .js)
  -x, --exclude <comma sep list of directories> Directories to exclude from parsing 
           (defaults to '.DS_Store,.svn,CVS,.git,build_rollup_tmp,build_tmp')
  -v, --version Show the current YUIDoc version
  --project-version Set the doc version for the template
  -N, --no-color Turn off terminal colors (for automation)
  -C, --no-code Turn off code generation (don't include source files in output)
  -n, --norecurse Do not recurse directories (default is to recurse)
  -S, --selleck Look for Selleck component data and attach to API meta data
  -V, --view Dump the Handlebars.js view data instead of writing template files
  -p, --parse-only Only parse the API docs and create the JSON data, do not render templates
  -o, --out <directory path> Path to put the generated files (defaults to ./out)
  -t, --themedir <directory path> Path to a custom theme directory containing Handlebars templates
  -H, --helpers <comma separated list of paths to files> Require these file and add Handlebars helpers. See docs for more information
  --charset CHARSET Use this as the default charset for all file operations. Defaults to 'utf8'
  -h, --help Show this help
  -q, --quiet Supress logging output
  -T, --theme <simple|default> Choose one of the built in themes (default is default)
  --syntaxtype <js|coffee> Choose comment syntax type (default is js)
  --server <port> Fire up the YUIDoc server for faster API doc developement. Pass optional port to listen on. (default is 3000)
  --lint Lint your docs, will print parser warnings and exit code 1 if there are any

  <input path> Supply a list of paths (shell globbing is handy here)

