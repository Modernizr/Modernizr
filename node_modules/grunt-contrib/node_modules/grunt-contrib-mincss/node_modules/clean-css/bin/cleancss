#!/usr/bin/env node

var util = require("util");
  fs = require('fs'),
  path = require('path'),
  argv = require('optimist').argv,
  CleanCSS = require('../index');

var options = {
  source: null,
  target: null
};
var cleanOptions = {};
var fromStdin = !process.env['__DIRECT__'] && process.stdin.readable;

if (argv.o) options.target = argv.o;
if (argv._) options.source = argv._[0];
if (argv.e) cleanOptions.removeEmpty = true;
if (argv.b) cleanOptions.keepBreaks = true;
if (argv.s1) cleanOptions.keepSpecialComments = 1;
if (argv.s0) cleanOptions.keepSpecialComments = 0;

if (argv.v) {
  var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
  util.puts(JSON.parse(packageConfig).version);
  return 0;
}

if (argv.h || argv.help || (!fromStdin && argv._.length == 0)) {
  util.puts("usage: cleancss [options] -o <output-file> <input-file>\n");
  util.puts("options:");
  util.puts("  -e\tRemove empty declarations (e.g. a{})");
  util.puts("  -b\tKeep line breaks");
  util.puts("  --s0\tRemove all special comments (i.e. /*! special comment */)");
  util.puts("  --s1\tRemove all special comments but the first one");
  return 0;
}

if (options.source) {
  fs.readFile(options.source, 'utf8', function(error, text) {
    if (error) throw error;
    output(CleanCSS.process(text, cleanOptions));
  });
} else {
  var stdin = process.openStdin();
  stdin.setEncoding('utf-8');
  var text = '';
  stdin.on('data', function(chunk) {
    text += chunk;
  });
  stdin.on('end', function() {
    output(CleanCSS.process(text, cleanOptions));
  });
}

function output(cleaned) {
  if (options.target) {
    fs.writeFileSync(options.target, cleaned, 'utf8');
  } else {
    process.stdout.write(cleaned);
  }
};
